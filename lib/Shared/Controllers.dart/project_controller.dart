import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../../Api_Providers/Api_Responses/api_urls.dart'; // Import this if necessary
import '../../models/projects_models.dart';

class ProjectsViewController extends GetxController {
  var isLoading = true.obs;
  var projects = <Data>[].obs;

  Future<void> fetchProjects(String cnic) async {
    if (cnic.isEmpty) {
      Get.snackbar('Error', 'CNIC cannot be empty');
      return;
    }
    try {
      isLoading(true);
      final Map<String, String> body = {'cnic': cnic};

      final response = await http.post(
        Uri.parse(getProjectsByCnicUrl),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(body),
      );

      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');

      if (response.statusCode == 200) {
        final Autogenerated autogenerated =
            Autogenerated.fromJson(json.decode(response.body));
        print('Fetched projects: ${autogenerated.data}'); // Debugging line
        if (autogenerated.status == true) {
          projects.assignAll(autogenerated.data!);
          print('Projects loaded: ${projects.length}'); // Add this line
        } else {
          Get.snackbar('Error', 'No projects found for this CNIC');
        }
      } else {
        Get.snackbar('Error',
            'Failed to fetch projects. Status code: ${response.statusCode}');
      }
    } catch (e) {
      Get.snackbar('Error', 'An error occurred: $e');
      print('Fetch error: $e');
    } finally {
      isLoading(false);
    }
  }
}
